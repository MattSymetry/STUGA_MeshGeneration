#pragma kernel CSMain
#include "Helper.compute"

struct Triangle {
    float3 a;
    float3 b;
    float3 c;
};

AppendStructuredBuffer<Triangle> triangles;
RWStructuredBuffer<float4> points;
int resolution;

int getIndex(int x, int y, int z) {
    return z * resolution * resolution + y * resolution + x;
}

float3 interpolate(float4 a, float4 b) {
    return ((a.xyz + b.xyz) / 2);
}

[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= resolution-1 || id.y >= resolution-1 || id.z >= resolution-1) {
        return;
    }

    float4 cube[8] = {
        points[getIndex(id.x, id.y, id.z)],
        points[getIndex(id.x+1, id.y, id.z)],
        points[getIndex(id.x, id.y+1, id.z)],
        points[getIndex(id.x+1, id.y+1, id.z)],
        points[getIndex(id.x, id.y, id.z+1)],
        points[getIndex(id.x+1, id.y, id.z+1)],
        points[getIndex(id.x, id.y+1, id.z+1)],
        points[getIndex(id.x+1, id.y+1, id.z+1)]
    };

    int cubeIndex = 0;
    // Calculate cube index
    if(cube[0].w > 0){cubeIndex += 1;}
    if(cube[1].w > 0){cubeIndex += 2;}
    if(cube[2].w > 0){cubeIndex += 4;}
    if(cube[3].w > 0){cubeIndex += 8;}
    if(cube[4].w > 0){cubeIndex += 16;}
    if(cube[5].w > 0){cubeIndex += 32;}
    if(cube[6].w > 0){cubeIndex += 64;}
    if(cube[7].w > 0){cubeIndex += 128;}

    float3 edges[12] = {
        interpolate(cube[0], cube[1]), //5,0,0
        interpolate(cube[1], cube[3]),
        interpolate(cube[3], cube[2]),
        interpolate(cube[2], cube[0]),//0,5,0
        interpolate(cube[4], cube[5]),
        interpolate(cube[5], cube[7]),
        interpolate(cube[7], cube[6]),
        interpolate(cube[6], cube[4]),
        interpolate(cube[0], cube[4]),//0,0,5
        interpolate(cube[1], cube[5]),
        interpolate(cube[3], cube[7]),
        interpolate(cube[2], cube[6])
    };

    for (int i = 0; triangleTable[cubeIndex][i] != -1; i += 3) {
        Triangle tri;
        tri.a = edges[triangleTable[cubeIndex][i]];
        tri.b = edges[triangleTable[cubeIndex][i+1]];
        tri.c = edges[triangleTable[cubeIndex][i+2]];
        triangles.Append(tri);
    }
}