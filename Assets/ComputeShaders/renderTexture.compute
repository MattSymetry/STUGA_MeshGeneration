#pragma kernel CSMain
#include "Noise.compute"

RWTexture3D<float2> renderTexture;
int textureSize;
float planetSize;
float noiseScale;
float noiseHeightMultiplier;

float calculateDensity(int3 cell) {
	float3 worldPos = ((cell / float(textureSize-1.0)) - 0.5) * float(textureSize-1.0);

	float halfS = planetSize / 2.0;
	float maxD = length(float3(halfS,halfS,halfS));

	float fudge = 1;

	float density = length(worldPos) / (maxD + fudge) - 0.5;

	// Noise
    //float noise = (snoise(worldPos/textureSize * 0.3));
	//density += noise;

	return density;
}

[numthreads(8,8,8)]
void CSMain (int3 id : SV_DispatchThreadID)
{
    if (id.x >= textureSize || id.y >= textureSize || id.z >= textureSize) {
		return;
	}

	float density = calculateDensity(id);


    float g = 0;
    if (id.x > textureSize/2.0) {
        g = 1;
    }

	renderTexture[id] = float2(density, g);

}