#pragma kernel CSMain

RWTexture3D<float2> renderTexture;
int textureSize;
float3 position;
float radius;
float deltaTime;
float strength;
float color;

// return smooth value between 0 and 1 (0 when t = minVal, 1 when t = maxVal)
float smoothstep(float minVal, float maxVal, float t) {
	t = saturate((t-minVal) / (maxVal - minVal));
	return t * t * (3 - 2 * t);
}

[numthreads(8,8,8)]
void CSMain (int3 id : SV_DispatchThreadID)
{
    deltaTime = 1;
	const int b = 4;
	if (id.x >= textureSize-b || id.y >= textureSize-b || id.z >= textureSize-b) {
		return;
	}
	if (id.x <= b || id.y <= b || id.z <=b) {
		return;
	}

	int3 offset = float3(id) - position;
	int sqrDst = dot(offset, offset);


	if (sqrDst <= radius * radius) {
		float dst = sqrt(sqrDst);
		float brushWeight = 1-smoothstep(radius * 0.7, radius, dst);
		renderTexture[id] = float2(renderTexture[id].x + (strength * deltaTime * brushWeight), renderTexture[id].y);
	}
}