//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/InputController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputController : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputController"",
    ""maps"": [
        {
            ""name"": ""FocusMode"",
            ""id"": ""e3322b28-f42b-4a7e-a294-5653d646c753"",
            ""actions"": [
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""099fb550-e4d9-4252-8d37-d48a868a1149"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseDelta"",
                    ""type"": ""Value"",
                    ""id"": ""866a426e-d7ba-4a79-846a-6eeaa219a601"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""53f836cc-30ac-439e-83d3-59a95715289a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""841dbef7-0467-4923-9820-88606f0cdbd3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Y"",
                    ""id"": ""08bda854-b608-466f-a0e8-e234f7857b28"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""e6c1d3a7-c25c-4d37-bda5-d8eeb13e7667"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""7173cc63-6210-4931-b49c-fa1d9097479a"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""YVirtual"",
                    ""id"": ""24289cc1-dd91-4d6a-89f1-5b2c76c7f44d"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""e4e4215c-f07a-42cb-becb-326dddb5c207"",
                    ""path"": ""<VirtualMouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""98538185-68d6-4cda-aba6-4ca2f650c328"",
                    ""path"": ""<VirtualMouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""069f9471-0946-4ba9-a1e2-16c11bc0081e"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""MouseDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c22852ee-4106-49e3-b140-a74a8c2d5c50"",
                    ""path"": ""<VirtualMouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""MouseDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eca8f934-64b2-479a-affc-c2bf845f85f4"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3681f456-a11d-456c-b7dd-722fe897059f"",
                    ""path"": ""<VirtualMouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4d47c4c9-d40d-4d6c-80fa-f93090a25f99"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd76c03e-44dc-497e-b75d-ce3d56856d78"",
                    ""path"": ""<VirtualMouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<VirtualMouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // FocusMode
        m_FocusMode = asset.FindActionMap("FocusMode", throwIfNotFound: true);
        m_FocusMode_Zoom = m_FocusMode.FindAction("Zoom", throwIfNotFound: true);
        m_FocusMode_MouseDelta = m_FocusMode.FindAction("MouseDelta", throwIfNotFound: true);
        m_FocusMode_LeftClick = m_FocusMode.FindAction("LeftClick", throwIfNotFound: true);
        m_FocusMode_MousePosition = m_FocusMode.FindAction("MousePosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FocusMode
    private readonly InputActionMap m_FocusMode;
    private IFocusModeActions m_FocusModeActionsCallbackInterface;
    private readonly InputAction m_FocusMode_Zoom;
    private readonly InputAction m_FocusMode_MouseDelta;
    private readonly InputAction m_FocusMode_LeftClick;
    private readonly InputAction m_FocusMode_MousePosition;
    public struct FocusModeActions
    {
        private @InputController m_Wrapper;
        public FocusModeActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Zoom => m_Wrapper.m_FocusMode_Zoom;
        public InputAction @MouseDelta => m_Wrapper.m_FocusMode_MouseDelta;
        public InputAction @LeftClick => m_Wrapper.m_FocusMode_LeftClick;
        public InputAction @MousePosition => m_Wrapper.m_FocusMode_MousePosition;
        public InputActionMap Get() { return m_Wrapper.m_FocusMode; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FocusModeActions set) { return set.Get(); }
        public void SetCallbacks(IFocusModeActions instance)
        {
            if (m_Wrapper.m_FocusModeActionsCallbackInterface != null)
            {
                @Zoom.started -= m_Wrapper.m_FocusModeActionsCallbackInterface.OnZoom;
                @Zoom.performed -= m_Wrapper.m_FocusModeActionsCallbackInterface.OnZoom;
                @Zoom.canceled -= m_Wrapper.m_FocusModeActionsCallbackInterface.OnZoom;
                @MouseDelta.started -= m_Wrapper.m_FocusModeActionsCallbackInterface.OnMouseDelta;
                @MouseDelta.performed -= m_Wrapper.m_FocusModeActionsCallbackInterface.OnMouseDelta;
                @MouseDelta.canceled -= m_Wrapper.m_FocusModeActionsCallbackInterface.OnMouseDelta;
                @LeftClick.started -= m_Wrapper.m_FocusModeActionsCallbackInterface.OnLeftClick;
                @LeftClick.performed -= m_Wrapper.m_FocusModeActionsCallbackInterface.OnLeftClick;
                @LeftClick.canceled -= m_Wrapper.m_FocusModeActionsCallbackInterface.OnLeftClick;
                @MousePosition.started -= m_Wrapper.m_FocusModeActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_FocusModeActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_FocusModeActionsCallbackInterface.OnMousePosition;
            }
            m_Wrapper.m_FocusModeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Zoom.started += instance.OnZoom;
                @Zoom.performed += instance.OnZoom;
                @Zoom.canceled += instance.OnZoom;
                @MouseDelta.started += instance.OnMouseDelta;
                @MouseDelta.performed += instance.OnMouseDelta;
                @MouseDelta.canceled += instance.OnMouseDelta;
                @LeftClick.started += instance.OnLeftClick;
                @LeftClick.performed += instance.OnLeftClick;
                @LeftClick.canceled += instance.OnLeftClick;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
            }
        }
    }
    public FocusModeActions @FocusMode => new FocusModeActions(this);
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    public interface IFocusModeActions
    {
        void OnZoom(InputAction.CallbackContext context);
        void OnMouseDelta(InputAction.CallbackContext context);
        void OnLeftClick(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
    }
}
